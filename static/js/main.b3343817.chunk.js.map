{"version":3,"sources":["game/Ship.js","utils.js","constants/ItemTypes.js","game/Gameboard.js","game/Player.js","game/ComputerPlayer.js","components/Board.js","components/Cell.js","components/Ship.js","components/Gameboard.js","components/Attackboard.js","components/GameState.js","components/Game.js","App.js","index.js"],"names":["createCoords","x","y","length","orientation","row","col","coords","push","i","Ship","hits","hit","isSunk","getStartCoords","getRandomInt","min","max","Math","floor","random","ceil","ItemTypes","createBoard","arr","j","validCoords","Gameboard","board","ships","getNeighbors","ship","withShip","coordsArr","filter","canPlaceShip","neighbors","hasShip","canMoveShip","shipCoords","forEach","s","find","newShip","placeShip","placeShips","Object","entries","s4","quantity","s3","s2","s1","getShips","getGameboard","getAttackboard","map","cell","moveShip","movedShip","receiveAttack","markArea","randomizeShips","Player","gameboard","attack","enemy","hasLost","every","ComputerPlayer","hitsHistory","player","getAttackCoords","enemyBoard","emptyCellCooords","randomAttack","prevHitCoords","sortedHitsHistory","sort","a","b","minCoords","maxCoords","emptyNeighbors","searchingAttack","assign","attackResult","StyledBoardContainer","styled","div","StyledNumbersCaption","StyledCaptionText","StyledLettersCaption","Board","children","StyledCell","props","hover","StyledHitCell","StyledMarkCell","Cell","type","onCellClick","undefined","onClick","renderCell","StyledShip","attrs","style","top","left","width","height","opacity","isDragging","id","useDrag","item","collect","monitor","drag","ref","StyledBoard","getDndCoords","delta","parseInt","round","useDrop","accept","drop","getDifferenceFromInitialOffset","canDrop","isOver","rowIndex","colIndex","key","Attackboard","StyledButton","button","StyledButtonsWrapper","StyledMessage","h3","GameState","onRandom","onPlay","onNewGame","started","winner","whoseTurn","disabled","StyledGame","StyledHeader","header","computerPlayer","Game","useState","setGameboard","attackboard","setAttackboard","setShips","setStarted","setWinner","setWhoseTurn","init","uuidv4","useEffect","playerTurn","computerTurn","setTimeout","StyledWrapper","GlobalStyle","createGlobalStyle","app","DndProvider","backend","Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3343817.chunk.js","sourcesContent":["function createCoords(x, y, length, orientation) {\n  let [row, col] = [x, y];\n  const coords = [];\n\n  coords.push({ row, col });\n  for (let i = 0; i < length - 1; i++) {\n    if (orientation) {\n      col++;\n    }\n\n    if (!orientation) {\n      row++;\n    }\n    coords.push({ row, col });\n  }\n\n  return coords;\n}\n\nexport default function Ship(row, col, length = 1, orientation = true) {\n  // orientation true = horizontal, false = vertical\n  // const id = `PS${row}${col}`;\n  let hits = 0;\n  const coords = createCoords(row, col, length, orientation);\n  const hit = () => hits++;\n  const isSunk = () => hits === length;\n  const getStartCoords = () => coords[0];\n\n  return {\n    get length() {\n      return length;\n    },\n    get orientation() {\n      return orientation;\n    },\n    coords,\n    getStartCoords,\n    hit,\n    isSunk,\n  };\n}\n","export default function getRandomInt(min, max) {\n  return (\n    Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min))) +\n    Math.ceil(min)\n  );\n}\n","export const BOARD_SIZE = 10;\n\nexport const ItemTypes = {\n  SHIP: 'ship',\n};\n","import Ship from './Ship';\nimport getRandomInt from '../utils';\nimport { BOARD_SIZE } from '../constants/ItemTypes';\n\nfunction createBoard() {\n  const arr = [];\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    arr.push([]);\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      arr[i].push('');\n    }\n  }\n  return arr;\n}\n\nexport const validCoords = coords =>\n  !!(\n    coords.row >= 0 &&\n    coords.col >= 0 &&\n    coords.row < BOARD_SIZE &&\n    coords.col < BOARD_SIZE\n  );\n\nexport default function Gameboard() {\n  let board = createBoard();\n  let ships = [];\n\n  const getGameboard = () => board;\n  const getAttackboard = () =>\n    board.map(row => row.map(cell => (cell === 'S' ? '' : cell)));\n  const getShips = () => ships;\n\n  const getNeighbors = (ship, withShip = true) => {\n    const { length = 1, orientation } = ship;\n    const { row, col } = ship.getStartCoords();\n\n    const coordsArr = [];\n\n    if (!orientation) {\n      coordsArr.push({ row: row - 1, col: col - 1 });\n      coordsArr.push({ row: row - 1, col });\n      coordsArr.push({ row: row - 1, col: col + 1 });\n\n      for (let i = row; i < row + length; i++) {\n        coordsArr.push({ row: i, col: col - 1 });\n        if (withShip) {\n          coordsArr.push({ row: i, col });\n        }\n        coordsArr.push({ row: i, col: col + 1 });\n      }\n      coordsArr.push({ row: row + length, col: col - 1 });\n      coordsArr.push({ row: row + length, col });\n      coordsArr.push({ row: row + length, col: col + 1 });\n    }\n\n    if (orientation) {\n      coordsArr.push({ row: row - 1, col: col - 1 });\n      coordsArr.push({ row, col: col - 1 });\n      coordsArr.push({ row: row + 1, col: col - 1 });\n\n      for (let i = col; i < col + length; i++) {\n        coordsArr.push({ row: row - 1, col: i });\n        if (withShip) {\n          coordsArr.push({ row, col: i });\n        }\n        coordsArr.push({ row: row + 1, col: i });\n      }\n\n      coordsArr.push({ row: row - 1, col: col + length });\n      coordsArr.push({ row, col: col + length });\n      coordsArr.push({ row: row + 1, col: col + length });\n    }\n    return coordsArr.filter(validCoords);\n  };\n  const markArea = ship => {\n    const coordsArr = getNeighbors(ship, false);\n    coordsArr.forEach(coords => {\n      board[coords.row][coords.col] = 'M';\n    });\n  };\n  const canPlaceShip = ship => {\n    const { length } = ship;\n    const { row, col } = ship.getStartCoords();\n\n    if (row < 0 || col < 0 || col >= 10 || row >= 10) {\n      return false;\n    }\n\n    if (ship.orientation) {\n      if (col + length > 10) {\n        return false;\n      }\n    }\n    if (!ship.orientation) {\n      if (row + length > 10) {\n        return false;\n      }\n    }\n\n    const neighbors = getNeighbors(ship);\n    let hasShip = false;\n    for (const coords of neighbors) {\n      if (board[coords.row][coords.col] === 'S') {\n        hasShip = true;\n        break;\n      }\n    }\n\n    return !hasShip;\n  };\n  const canMoveShip = (ship, row, col) => {\n    // delete ship and try place at {row, col}\n    const shipCoords = ship.coords;\n    shipCoords.forEach(coords => {\n      board[coords.row][coords.col] = '';\n    });\n    ships = ships.filter(\n      s =>\n        !s.coords.find(\n          coords =>\n            ship.coords[0].row === coords.row &&\n            ship.coords[0].col === coords.col\n        )\n    );\n    const newShip = Ship(row, col, ship.length, ship.orientation);\n    if (canPlaceShip(newShip)) {\n      return true;\n    }\n\n    shipCoords.forEach(coords => {\n      board[coords.row][coords.col] = 'S';\n    });\n    ships.push(ship);\n    return false;\n  };\n  const placeShip = ship => {\n    if (canPlaceShip(ship)) {\n      ship.coords.forEach(coords => {\n        board[coords.row][coords.col] = 'S';\n      });\n      ships.push(ship);\n      return true;\n    }\n    return false;\n  };\n  const placeShips = () => {\n    const shipsToPlace = {\n      s4: { quantity: 1, length: 4 },\n      s3: { quantity: 2, length: 3 },\n      s2: { quantity: 3, length: 2 },\n      s1: { quantity: 4, length: 1 },\n    };\n\n    Object.entries(shipsToPlace).forEach(([name, ship]) => {\n      let { quantity, length } = ship;\n\n      while (quantity > 0) {\n        const newShip = Ship(\n          getRandomInt(0, BOARD_SIZE),\n          getRandomInt(0, BOARD_SIZE),\n          length,\n          Math.random() > 0.5\n        );\n\n        if (placeShip(newShip)) {\n          quantity--;\n        }\n      }\n    });\n  };\n  const moveShip = (ship, row, col) => {\n    if (canMoveShip(ship, row, col)) {\n      const movedShip = Ship(row, col, ship.length, ship.orientation);\n      placeShip(movedShip);\n      return movedShip;\n    }\n    return undefined;\n  };\n\n  const randomizeShips = () => {\n    board = createBoard();\n    ships = [];\n    placeShips();\n  };\n\n  const receiveAttack = (row, col) => {\n    if (board[row][col] !== 'S') {\n      board[row][col] = 'M';\n      return 'miss';\n    }\n\n    const ship = ships.find(s =>\n      s.coords.find(coords => coords.row === row && coords.col === col)\n    );\n    if (ship) {\n      ship.hit();\n      if (ship.isSunk()) {\n        board[row][col] = 'X';\n        markArea(ship);\n        return 'dead';\n      }\n      board[row][col] = 'X';\n      return 'hit';\n    }\n  };\n  return {\n    getShips,\n    getGameboard,\n    getAttackboard,\n    placeShip,\n    canMoveShip,\n    moveShip,\n    placeShips,\n    receiveAttack,\n    randomizeShips,\n  };\n}\n","import Gameboard from './Gameboard';\n\nexport default function Player() {\n  const gameboard = Gameboard();\n\n  const hasLost = () => {\n    return gameboard.getShips().every(ship => ship.isSunk());\n  };\n  const attack = (enemy, row, col) => {\n    const attackResult = enemy.receiveAttack(row, col);\n    return attackResult !== 'miss';\n  };\n\n  const {\n    receiveAttack,\n    placeShip,\n    placeShips,\n    getGameboard,\n    getAttackboard,\n    getShips,\n    randomizeShips,\n    canMoveShip,\n    moveShip,\n  } = gameboard;\n\n  return {\n    receiveAttack,\n    placeShip,\n    placeShips,\n    getGameboard,\n    getAttackboard,\n    getShips,\n    attack,\n    hasLost,\n    randomizeShips,\n    canMoveShip,\n    moveShip,\n  };\n}\n","import getRandomInt from '../utils';\nimport Player from './Player';\nimport { validCoords } from './Gameboard';\nimport { BOARD_SIZE } from '../constants/ItemTypes';\n\nexport default function ComputerPlayer() {\n  let hitsHistory = [];\n  const player = Player();\n\n  const randomAttack = board => {\n    const emptyCellCooords = [];\n\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (board[row][col] === '') {\n          emptyCellCooords.push({ row, col });\n        }\n      }\n    }\n\n    return emptyCellCooords[getRandomInt(0, emptyCellCooords.length)];\n  };\n\n  const searchingAttack = board => {\n    const { row, col } = hitsHistory[hitsHistory.length - 1];\n\n    let neighbors = [];\n\n    if (hitsHistory.length > 1) {\n      const prevHitCoords = hitsHistory[hitsHistory.length - 2];\n\n      if (prevHitCoords.row === row) {\n        const sortedHitsHistory = hitsHistory.sort((a, b) => a.col - b.col);\n        const minCoords = sortedHitsHistory[0];\n        const maxCoords = sortedHitsHistory[sortedHitsHistory.length - 1];\n\n        neighbors.push({ row, col: maxCoords.col + 1 });\n        neighbors.push({ row, col: minCoords.col - 1 });\n      }\n\n      if (prevHitCoords.col === col) {\n        const sortedHitsHistory = hitsHistory.sort((a, b) => a.row - b.row);\n        const minCoords = sortedHitsHistory[0];\n        const maxCoords = sortedHitsHistory[sortedHitsHistory.length - 1];\n\n        neighbors.push({ row: maxCoords.row + 1, col });\n        neighbors.push({ row: minCoords.row - 1, col });\n      }\n    } else {\n      neighbors.push({ row: row - 1, col });\n      neighbors.push({ row, col: col + 1 });\n      neighbors.push({ row: row + 1, col });\n      neighbors.push({ row, col: col - 1 });\n    }\n    neighbors = neighbors.filter(validCoords);\n    const emptyNeighbors = [];\n    neighbors.forEach(coords => {\n      if (board[coords.row][coords.col] === '') {\n        emptyNeighbors.push(coords);\n      }\n    });\n    return emptyNeighbors[getRandomInt(0, emptyNeighbors.length)];\n  };\n\n  const getAttackCoords = enemy => {\n    let coords;\n    const enemyBoard = enemy.getAttackboard();\n    if (hitsHistory.length === 0) {\n      coords = randomAttack(enemyBoard);\n    } else {\n      coords = searchingAttack(enemyBoard);\n    }\n    return coords;\n  };\n\n  const attack = enemy => {\n    const { row, col } = getAttackCoords(enemy);\n    const attackResult = enemy.receiveAttack(row, col);\n    if (attackResult === 'hit') {\n      hitsHistory.push({ row, col });\n      return true;\n    }\n\n    if (attackResult === 'dead') {\n      hitsHistory = [];\n      return true;\n    }\n\n    return false;\n  };\n  return Object.assign(player, {\n    attack,\n  });\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledBoardContainer = styled.div`\n  display: grid;\n  width: 342px;\n  height: 342px;\n  grid-template: 32px 1fr/ 32px 1fr;\n  margin-right: 20px;\n`;\n\nconst StyledNumbersCaption = styled.div`\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 1/2;\n`;\n\nconst StyledCaptionText = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 10px;\n`;\n\nconst StyledLettersCaption = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-column: 2/3;\n`;\n\nexport default function Board({ children }) {\n  return (\n    <StyledBoardContainer>\n      <StyledLettersCaption>\n        <StyledCaptionText>A</StyledCaptionText>\n        <StyledCaptionText>B</StyledCaptionText>\n        <StyledCaptionText>C</StyledCaptionText>\n        <StyledCaptionText>D</StyledCaptionText>\n        <StyledCaptionText>E</StyledCaptionText>\n        <StyledCaptionText>F</StyledCaptionText>\n        <StyledCaptionText>G</StyledCaptionText>\n        <StyledCaptionText>H</StyledCaptionText>\n        <StyledCaptionText>I</StyledCaptionText>\n        <StyledCaptionText>J</StyledCaptionText>\n      </StyledLettersCaption>\n      <StyledNumbersCaption>\n        <StyledCaptionText>1</StyledCaptionText>\n        <StyledCaptionText>2</StyledCaptionText>\n        <StyledCaptionText>3</StyledCaptionText>\n        <StyledCaptionText>4</StyledCaptionText>\n        <StyledCaptionText>5</StyledCaptionText>\n        <StyledCaptionText>6</StyledCaptionText>\n        <StyledCaptionText>7</StyledCaptionText>\n        <StyledCaptionText>8</StyledCaptionText>\n        <StyledCaptionText>9</StyledCaptionText>\n        <StyledCaptionText>10</StyledCaptionText>\n      </StyledNumbersCaption>\n      {children}\n    </StyledBoardContainer>\n  );\n}\n\nBoard.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledCell = styled.div`\n  box-shadow: 1px 0 0 0 #b4b4ff, 0 1px 0 0 #b4b4ff, 1px 1px 0 0 #b4b4ff,\n    1px 0 0 0 #b4b4ff inset, 0 1px 0 0 #b4b4ff inset;\n\n  &:hover {\n    border: ${props => (props.hover ? '2px solid red' : 'none')};\n    cursor: ${props => props.hover && 'crosshair'};\n  }\n`;\n\nconst StyledHitCell = styled(StyledCell)`\n  color: red;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 32px;\n`;\n\nconst StyledMarkCell = styled(StyledCell)`\n  position: relative;\n  background-color: #eee;\n  &::before {\n    content: '';\n    position: absolute;\n    height: 4px;\n    width: 4px;\n    border-radius: 50%;\n    background-color: #333;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport default function Cell({ type, onCellClick }) {\n  const renderCell = type => {\n    if (type === 'X') {\n      return <StyledHitCell>&#128500;</StyledHitCell>;\n    }\n\n    if (type === 'M') {\n      return <StyledMarkCell />;\n    }\n\n    if (onCellClick !== undefined) {\n      return <StyledCell onClick={onCellClick} hover />;\n    }\n\n    return <StyledCell />;\n  };\n\n  return <>{renderCell(type)}</>;\n}\n\nCell.propTypes = {\n  type: PropTypes.string.isRequired,\n  onCellClick: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useDrag } from 'react-dnd';\nimport { ItemTypes } from '../constants/ItemTypes';\n\nconst StyledShip = styled.div.attrs(\n  ({ row, col, length, orientation, isDragging }) => ({\n    style: {\n      top: row * 32,\n      left: col * 32,\n      width: orientation ? 32 * length + 1 : '33px',\n      height: !orientation ? 32 * length + 1 : '33px',\n      opacity: isDragging ? 0.3 : 0.7,\n    },\n  })\n)`\n  position: absolute;\n  border: 2px solid #00f;\n  background-color: rgba(0, 0, 255, 0.05);\n  cursor: move;\n`;\n\nexport default function Ship({ id, length, orientation, coords }) {\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      id,\n      length,\n      orientation,\n      coords,\n      type: ItemTypes.SHIP,\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const { row, col } = coords[0];\n\n  if (isDragging) {\n    return (\n      <StyledShip\n        ref={drag}\n        row={row}\n        col={col}\n        length={length}\n        orientation={orientation && true}\n        isDragging\n      />\n    );\n  }\n  return (\n    <StyledShip\n      ref={drag}\n      row={row}\n      col={col}\n      length={length}\n      orientation={orientation && true}\n      isDragging={false}\n    />\n  );\n}\n\nShip.propTypes = {\n  id: PropTypes.string.isRequired,\n  length: PropTypes.number.isRequired,\n  orientation: PropTypes.bool.isRequired,\n  coords: PropTypes.arrayOf(\n    PropTypes.shape({\n      row: PropTypes.number.isRequired,\n      col: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../constants/ItemTypes';\nimport Cell from './Cell';\nimport Ship from './Ship';\n\nconst StyledBoard = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 32px);\n  grid-template-rows: repeat(10, 32px);\n  position: relative;\n`;\n\nfunction getDndCoords(delta, item) {\n  const y = 32 * item.row;\n  const x = 32 * item.col;\n\n  const row = parseInt(Math.round((y + delta.y) / 32), 10);\n  const col = parseInt(Math.round((x + delta.x) / 32), 10);\n  return { row, col };\n}\n\nexport default function Gameboard({ board, ships, canMoveShip, moveShip }) {\n  const [, drop] = useDrop({\n    accept: ItemTypes.SHIP,\n    drop: (item, monitor) => {\n      const delta = monitor.getDifferenceFromInitialOffset();\n\n      const { row, col } = getDndCoords(delta, item.coords[0]);\n      moveShip(item, row, col);\n      return undefined;\n    },\n    canDrop: (item, monitor) => {\n      const delta = monitor.getDifferenceFromInitialOffset();\n\n      const { row, col } = getDndCoords(delta, item.coords[0]);\n      return canMoveShip(item, row, col);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  });\n\n  const renderCells = () =>\n    board.map((row, rowIndex) =>\n      row.map((cell, colIndex) => (\n        <Cell type={cell} key={`g${rowIndex}${colIndex}`} />\n      ))\n    );\n\n  const renderShips = () =>\n    ships.map(ship => {\n      const { coords } = ship;\n      return (\n        <Ship\n          coords={coords}\n          id={ship.id}\n          key={ship.id}\n          length={ship.length}\n          orientation={ship.orientation}\n        />\n      );\n    });\n\n  return (\n    <StyledBoard ref={drop}>\n      {renderCells()}\n      {renderShips()}\n    </StyledBoard>\n  );\n}\n\nGameboard.propTypes = {\n  board: PropTypes.arrayOf(PropTypes.array).isRequired,\n  ships: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      length: PropTypes.number.isRequired,\n      orientation: PropTypes.bool.isRequired,\n      coords: PropTypes.arrayOf(\n        PropTypes.shape({\n          row: PropTypes.number.isRequired,\n          col: PropTypes.number.isRequired,\n        })\n      ),\n    })\n  ).isRequired,\n  canMoveShip: PropTypes.func.isRequired,\n  moveShip: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\n\nconst StyledBoard = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 32px);\n  grid-template-rows: repeat(10, 32px);\n  position: relative;\n`;\n\nexport default function Attackboard({ board, onCellClick }) {\n  const renderCells = () =>\n    board.map((row, rowIndex) =>\n      row.map((cell, colIndex) => (\n        <Cell\n          type={cell}\n          key={`g${rowIndex}${colIndex}`}\n          onCellClick={() => onCellClick(rowIndex, colIndex)}\n        />\n      ))\n    );\n\n  return <StyledBoard>{renderCells()}</StyledBoard>;\n}\n\nAttackboard.propTypes = {\n  board: PropTypes.arrayOf(PropTypes.array).isRequired,\n  onCellClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledButton = styled.button`\n  align-self: center;\n  padding: 10px 20px;\n  margin-top: 4px;\n  border: none;\n  border-radius: 5px;\n  background-color: lightgreen;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StyledButtonsWrapper = styled.div`\n  display: flex;\n  grid-column: 1 / 4;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst StyledMessage = styled.h3`\n  margin-top: 10px;\n  text-align: center;\n`;\n\nexport default function GameState({\n  onRandom,\n  onPlay,\n  onNewGame,\n  started,\n  winner,\n  whoseTurn,\n}) {\n  return (\n    <StyledButtonsWrapper>\n      {started && <StyledButton onClick={onNewGame}>New Game</StyledButton>}\n      {!winner && !started && (\n        <StyledButton onClick={onPlay}>Play</StyledButton>\n      )}\n      {!started && !winner && <StyledMessage>Place ships</StyledMessage>}\n      {started && !winner && <StyledMessage>{whoseTurn}</StyledMessage>}\n      {started && winner && (\n        <StyledMessage>{`${winner} won the game`}</StyledMessage>\n      )}\n      <StyledButton onClick={onRandom} disabled={started}>\n        Random\n      </StyledButton>\n    </StyledButtonsWrapper>\n  );\n}\n\nGameState.propTypes = {\n  onRandom: PropTypes.func.isRequired,\n  onPlay: PropTypes.func.isRequired,\n  onNewGame: PropTypes.func.isRequired,\n  started: PropTypes.bool.isRequired,\n  winner: PropTypes.string.isRequired,\n  whoseTurn: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport uuidv4 from 'uuid/v4';\nimport Player from '../game/Player';\nimport ComputerPlayer from '../game/ComputerPlayer';\nimport Board from './Board';\nimport Gameboard from './Gameboard';\nimport Attackboard from './Attackboard';\nimport GameState from './GameState';\n\nconst StyledGame = styled.div`\n  display: inline-grid;\n  grid-template-rows: 100px 100px auto;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst StyledHeader = styled.header`\n  grid-column: 1 / 4;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n`;\n\nlet player = Player();\nlet computerPlayer = ComputerPlayer();\n\nexport default function Game() {\n  const [gameboard, setGameboard] = useState([]);\n  const [attackboard, setAttackboard] = useState([]);\n  const [ships, setShips] = useState([]);\n  const [started, setStarted] = useState(false);\n  const [winner, setWinner] = useState('');\n  const [whoseTurn, setWhoseTurn] = useState('Your turn');\n\n  const init = () => {\n    player = Player();\n    player.placeShips();\n    computerPlayer = ComputerPlayer();\n    computerPlayer.placeShips();\n\n    setGameboard(player.getGameboard());\n    setAttackboard(computerPlayer.getAttackboard());\n    setShips(\n      player.getShips().map(ship => ({\n        ...ship,\n        id: uuidv4(),\n      }))\n    );\n    setWhoseTurn('Your turn');\n    setStarted(false);\n    setWinner('');\n  };\n\n  useEffect(() => init(), []);\n\n  const canMoveShip = (ship, row, col) => {\n    if (!started) {\n      if (ship.row === row && ship.col === col) {\n        return false;\n      }\n\n      return player.canMoveShip(ship, row, col);\n    }\n  };\n\n  const moveShip = (ship, row, col) => {\n    const movedShip = player.moveShip(ship, row, col);\n    const { id } = ship;\n    setShips(ships.map(s => (s.id !== id ? s : { ...movedShip, id })));\n  };\n\n  const computerTurn = () => {\n    setTimeout(() => {\n      const attackResult = computerPlayer.attack(player);\n      setGameboard([...player.getGameboard()]);\n      if (player.hasLost()) {\n        setWinner('Computer');\n        return;\n      }\n      if (attackResult) {\n        computerTurn();\n        return;\n      }\n      setWhoseTurn('Your turn');\n    }, 400);\n  };\n\n  const playerTurn = (row, col) => {\n    const attackResult = player.attack(computerPlayer, row, col);\n    setAttackboard(computerPlayer.getAttackboard());\n    if (computerPlayer.hasLost()) {\n      setWinner('You');\n      return;\n    }\n    if (attackResult) {\n      return;\n    }\n    setWhoseTurn('Computer turn');\n    computerTurn();\n  };\n\n  const handlePlay = () => {\n    setStarted(true);\n  };\n\n  const handleRandom = () => {\n    if (!started) {\n      player.randomizeShips();\n      setShips(\n        player.getShips().map(ship => ({\n          ...ship,\n          id: uuidv4(),\n        }))\n      );\n    }\n  };\n\n  const handleCellClick = (row, col) => {\n    if (started && !winner && whoseTurn === 'Your turn') {\n      playerTurn(row, col);\n    }\n  };\n\n  const handleNewGame = () => {\n    init();\n  };\n\n  return (\n    <StyledGame>\n      <StyledHeader>\n        <h1>Battleship</h1>\n      </StyledHeader>\n      <GameState\n        winner={winner}\n        started={started}\n        onPlay={handlePlay}\n        onRandom={handleRandom}\n        onNewGame={handleNewGame}\n        whoseTurn={whoseTurn}\n      />\n      <Board>\n        <Gameboard\n          board={gameboard}\n          ships={ships}\n          canMoveShip={canMoveShip}\n          moveShip={moveShip}\n        />\n      </Board>\n      <Board>\n        <Attackboard board={attackboard} onCellClick={handleCellClick} />\n      </Board>\n    </StyledGame>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Game from './components/Game';\n\nconst StyledWrapper = styled.div`\n  max-width: 1080px;\n  min-width: 990px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function App() {\n  return (\n    <StyledWrapper>\n      <Game />\n    </StyledWrapper>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport App from './App';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n    font-size: 16px;\n    user-select: none;\n    font-family: 'Open Sans', sans-serif;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body, h1, h2, h3, h4, h5, h6, p, ol, ul {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n`;\n\nconst app = (\n  <>\n    <GlobalStyle />\n    <DndProvider backend={Backend}>\n      <App />\n    </DndProvider>\n  </>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}